coord_flip()
#Find which state has the 3rd most companies
filter(data, n == sort(data$n, T)[3])
#Create subset for NY
ny <- subset(inc, State=="NY")
ny <- ny[complete.cases(ny$Industry), ]
ny <- ny[complete.cases(ny$Employees), ]
med <- paste0("Median # of NY Employees:  ", median(ny$Employees))
avg <- paste0("Mean # of NY Employees:  ", round(mean(ny$Employees),0))
ggplot(ny, aes(x=reorder(Industry, Employees, FUN=median), y=Employees)) +
geom_boxplot(outlier.shape = 20) +
scale_y_continuous(trans = log10_trans(), limits = c(min(ny$Employees), max(ny$Employees))) +
geom_hline(yintercept = median(ny$Employees),
color="red",
linetype="dashed") +
geom_hline(yintercept = mean(ny$Employees),
color="grey",
linetype="dashed") +
geom_text(aes(x=2, label=med, y = 300),
size = 3,
colour="red") +
geom_text(aes(x=3, label=avg, y = 1710),
size = 3,
colour="grey") +
labs(title="NY Employees By Industry",
#subtitle="5000 Fastest Growing Companies by Industry",
#caption="Source: Inc Magazine",
y="Employees",
x="Industries") +
theme_classic() +
coord_flip()
#Find which state has the 3rd most companies
filter(data, n == sort(data$n, T)[3])
#Create subset for NY
ny <- subset(inc, State=="NY")
ny <- ny[complete.cases(ny$Industry), ]
ny <- ny[complete.cases(ny$Employees), ]
med <- paste0("Median # of NY Employees:  ", median(ny$Employees))
avg <- paste0("Mean # of NY Employees:  ", round(mean(ny$Employees),0))
ggplot(ny, aes(x=reorder(Industry, Employees, FUN=median), y=Employees)) +
geom_boxplot(outlier.shape = 20) +
scale_y_continuous(trans = log10_trans(), limits = c(min(ny$Employees), max(ny$Employees))) +
geom_hline(yintercept = median(ny$Employees),
color="red",
linetype="dashed") +
geom_hline(yintercept = mean(ny$Employees),
color="grey",
linetype="dashed") +
geom_text(aes(x=2, label=med, y = 300),
size = 3,
colour="red") +
geom_text(aes(x=3, label=avg, y = 1750),
size = 3,
colour="grey") +
labs(title="NY Employees By Industry",
#subtitle="5000 Fastest Growing Companies by Industry",
#caption="Source: Inc Magazine",
y="Employees",
x="Industries") +
theme_classic() +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(TotRev = sum(Revenue, na.rm=T), TotEmp = sum(Employees, na.rm=T)) %>%
mutate(AvgRevK = (TotRev/TotEmp)/1000)
ggplot(rev, aes(x=reorder(Industry, AvgRevK), y=AvgRevK)) +
geom_bar(stat="identity", width=.5, fill="tomato3")+
labs(title="Revenue Per Employee",
subtitle="5000 Fastest Growing Companies by Industry",
caption="Source: Inc Magazine",
y="Revenue - Thousands ($)",
x="") +
theme_classic() +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(TotRev = sum(Revenue, na.rm=T), TotEmp = sum(Employees, na.rm=T)) %>%
mutate(AvgRevK = (TotRev/TotEmp))
ggplot(rev, aes(x=reorder(Industry, AvgRevK), y=AvgRevK)) +
geom_bar(stat="identity", width=.5, fill="tomato3")+
labs(title="Revenue Per Employee",
subtitle="5000 Fastest Growing Companies by Industry",
caption="Source: Inc Magazine",
y="Revenue - Thousands ($)",
x="") +
theme_classic() +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees))
#summarise(TotRev = sum(Revenue, na.rm=T), TotEmp = sum(Employees, na.rm=T)) %>%
#mutate(AvgRevK = (TotRev/TotEmp))
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="tomato3")+
labs(title="Revenue Per Employee",
subtitle="5000 Fastest Growing Companies by Industry",
caption="Source: Inc Magazine",
y="Revenue - Thousands ($)",
x="") +
theme_classic() +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees))
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
labs(title="Revenue Per Employee",
caption="Source: Inc Magazine",
y="Revenue - Thousands ($)",
x="Industry") +
theme_light(8) +
#theme_classic() +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees))
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
labs(title="Revenue Per Employee",
caption="Source: Inc Magazine",
y="Revenue - Thousands ($)",
x="Industry") +
theme_light(10) +
#theme_classic() +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees))
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
labs(title="Revenue Per Employee",
caption="Source: Inc Magazine",
y="Revenue - Thousands ($)",
x="Industry") +
theme_light(12) +
#theme_classic() +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees))
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
labs(title="Revenue Per Employee",
caption="Source: Inc Magazine",
y="Revenue",
x="Industry") +
theme_light(12) +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees))
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
labs(title="Revenue Per Employee",
y="Revenue",
x="Industry") +
theme_light(12) +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees))
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
geom_segment(aes(x=Industry, xend=Industry, y=0, yend=1250000)) +
labs(title="Revenue Per Employee",
y="Revenue",
x="Industry") +
theme_light(12) +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees))
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
labs(title="Revenue Per Employee",
y="Revenue",
x="Industry") +
theme_light(12) +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees)/1000000)
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
labs(title="Revenue Per Employee",
y="Revenue",
x="Industry") +
theme_light(12) +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees)/1000000)
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
labs(title="Revenue Per Employee",
y="Revenue in $M",
x="Industry") +
theme_light(12) +
coord_flip()
rev <- inc[complete.cases(inc$Revenue), ]
rev <- rev[complete.cases(rev$Employees), ]
rev <- rev %>%
group_by(Industry) %>%
summarise(RevenuePer = sum(Revenue)/sum(Employees)/1000000)
ggplot(rev, aes(x=reorder(Industry, RevenuePer), y=RevenuePer)) +
geom_bar(stat="identity", width=.5, fill="red")+
labs(title="Revenue Per Employee",
y="Revenue ($M)",
x="Industry") +
theme_light(12) +
coord_flip()
shiny::runApp('CDCRates2')
shiny::runApp('Documents/Data 608 Visual Analytics/CDCRates2')
runApp('Documents/Data 608 Visual Analytics/CDCRates2')
load("/Users/kingdavidxiv/Documents/GitHub/DATA608/project/gentrification/gentrify.Rda")
View(gentrify)
nyc_zips <- zip_table
library(XML)
install.packages("XML")
zip_url <- 'https://www.health.ny.gov/statistics/cancer/registry/appendix/neighborhoods.htm'
source('~/.active-rstudio-document')
View(nyc_zips)
View(zip_table)
View(nyc_zips)
source('~/.active-rstudio-document')
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
View(zip_table)
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
View(nyc_zips)
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
install.packages("tidyr")
install.packages("stringr")
install.packages("xlsx")
library(xlsx)
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
library(XML)
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
View(inc)
library(XML)
zip_url <- 'https://www.health.ny.gov/statistics/cancer/registry/appendix/neighborhoods.htm'
# parse HTML & read table
zip_html <- htmlParse(readLines(zip_url))
zip_table <- readHTMLTable(zip_html, stringsAsFactors = FALSE)[[1]]
names(zip_table)[names(zip_table) == 'ZIP Codes'] <- 'ZipCode' #rename
nyc_zips <- zip_table
# borough is only populated in first row; web table had merged columns
# others havd zip NA; this is adjusted to have correct data by column
nyc_zips$ZipCode <- ifelse(is.na(zip_table$ZipCode),
zip_table$Neighborhood, zip_table$ZipCode)
nyc_zips$Neighborhood <- ifelse(is.na(zip_table$ZipCode),
zip_table$Borough, zip_table$Neighborhood)
nyc_zips$Borough <- ifelse(is.na(zip_table$ZipCode), NA, zip_table$Borough)
# zip codes for each neighborhood are a string with all zips
# these are split into a row for each zip to tidy the data
library(dplyr)
library(tidyr)
nyc_zips <- nyc_zips %>% mutate(ZipCode = strsplit(ZipCode, ',')) %>%
unnest(ZipCode) %>% select(ZipCode, Neighborhood, Borough)
library(stringr)
nyc_zips$ZipCode <- str_trim(nyc_zips$ZipCode)
# the NA boroughs introduced in the previous step must be filled
nyc_zips <- nyc_zips %>% fill(Borough)
View(nyc_zips)
nyc_zips <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NYC%20Zip%20Codes.csv",
header= TRUE)
View(nyc_zips)
names(nyc_zips)[names(nyc_zips) == 'ZIP.Codes'] <- 'ZipCode' #rename
View(nyc_zips)
nyc_zips <- nyc_zips %>% mutate(ZipCode = strsplit(ZipCode, ',')) %>%
unnest(ZipCode) %>% select(ZipCode, Neighborhood, Borough)
library(XML)
library(dplyr)
library(tidyr)
library(stringr)
nyc_zips <- nyc_zips %>% mutate(ZipCode = strsplit(ZipCode, ',')) %>%
unnest(ZipCode) %>% select(ZipCode, Neighborhood, Borough)
nyc_zips <- nyc_zips %>% mutate(ZipCode = strsplit(ZipCode, ','))
View(nyc_zips)
nyc_zips <- unnest(ZipCode) %>% select(ZipCode, Neighborhood, Borough)
nyc_zips <- nyc_zips %>% unnest(ZipCode) %>% select(ZipCode, Neighborhood, Borough)
View(nyc_zips)
nyc_zips <- nyc_zips %>% mutate(as.character(ZipCode) = strsplit(ZipCode, ',')) %>%
unnest(ZipCode) %>% select(ZipCode, Neighborhood, Borough)
View(nyc_zips)
library(XML)
library(dplyr)
library(tidyr)
library(stringr)
nyc_zips <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NYC%20Zip%20Codes.csv",
header= TRUE)
names(nyc_zips)[names(nyc_zips) == 'ZIP.Codes'] <- 'ZipCode' #rename
nyc_zips <- nyc_zips %>% mutate(as.character(ZipCode) = strsplit(ZipCode, ',')) %>%
unnest(ZipCode) %>% select(ZipCode, Neighborhood, Borough)
library(XML)
library(dplyr)
library(tidyr)
library(stringr)
nyc_zips <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NYC%20Zip%20Codes.csv",
header= TRUE)
names(nyc_zips)[names(nyc_zips) == 'ZIP.Codes'] <- 'ZipCode' #rename
nyc_zips <- nyc_zips %>% mutate(as.character(ZipCode) = strsplit(ZipCode, ',')) %>%
unnest(ZipCode) %>% select(ZipCode, Neighborhood, Borough)
View(nyc_zips)
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
View(nyc_zips)
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
View(nyc_zips)
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
View(nyc_zips)
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
source('~/Documents/Data 608 Visual Analytics/data_prep.R')
library(zoo)
install.packages("zoo")
library(zoo)
real_estate <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Price_Data.csv",
header= TRUE)
View(real_estate)
#Get median prices for zip codes in the NY zip code data
real_estate$ZipCode <- as.character(real_estate$RegionName)
real_estate <- real_estate %>% filter(ZipCode %in% nyc_zips$ZipCode)
View(real_estate)
##Real Estate Data##
real_estate <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Price_Data.csv",
header= TRUE)
View(real_estate)
View(nyc_zips)
nyc_zips$ZipCode <- as.character(nyc_zips$ZipCode)
#Get median prices for zip codes in the NY zip code data
real_estate$ZipCode <- as.character(real_estate$RegionName)
real_estate <- real_estate %>% filter(ZipCode %in% nyc_zips$ZipCode)
View(real_estate)
##Real Estate Data##
real_estate <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Price_Data.csv",
header= TRUE)
#Get median prices for zip codes in the NY zip code data
real_estate$ZipCode <- as.character(real_estate$RegionName)
View(real_estate)
##Real Estate Data##
real_estate <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Price_Data.csv",
header= TRUE)
#Get median prices for zip codes in the NY zip code data
real_estate$RegionName <- as.character(real_estate$RegionName)
real_estate <- real_estate %>% filter(RegionName %in% nyc_zips$ZipCode)
View(real_estate)
nyc_zips$ZipCode <- str_trim(nyc_zips$ZipCode)
##Real Estate Data##
real_estate <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Price_Data.csv",
header= TRUE)
#Get median prices for zip codes in the NY zip code data
real_estate$RegionName <- as.character(real_estate$RegionName)
real_estate <- real_estate %>% filter(RegionName %in% nyc_zips$ZipCode)
View(real_estate)
names(real_estate)[names(real_estate) == 'RegionName'] <- 'ZipCode'
real_estate <- real_estate %>%
gather(Period, MedianPrice, -ZipCode)
View(real_estate)
library(lubridate)
install.packages("lubridate")
library(lubridate)
real_estate$Period <- as.Date(as.yearmon(real_estate$Period, 'X%Y.%m'))
View(real_estate)
real_estate$Year <- year(real_estate$Period)
View(real_estate)
real_estate$Month <- month(real_estate$Period)
View(real_estate)
real_estate <- real_estate %>%
arrange(ZipCode, Period) %>% group_by(ZipCode) %>% drop_na(MedianPrice) %>%
mutate(PriceChange = MedianPrice / first(MedianPrice) - 1)
View(real_estate)
##Business Data##
biz <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Biz_From_2000.csv",
header= TRUE)
View(biz)
# select five new york counties and include only needed variables
biz <- biz %>%
select(Period = Initial.DOS.Filing.Date, ZipCode = DOS.Process.Zip) %>%
filter(ZipCode %in% nyc_zips$ZipCode)
View(biz)
##Business Data##
biz <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Biz_From_2000.csv",
header= TRUE)
View(biz)
# select five new york counties and include only needed variables
biz <- biz %>%
select(Period = Initial.DOS.Filing.Date, ZipCode = DOS.Process.Zip, Name=Current.Entity.Name) %>%
filter(ZipCode %in% nyc_zips$ZipCode)
View(biz)
biz$Period <- as.Date(as.yearmon(biz$Period, '%m/%d/%Y'))
biz$Year <- year(biz$Period)
biz$Month <- month(biz$Period)
View(biz)
# select five new york counties and include only needed variables
biz <- biz %>%
select(Period = Initial.DOS.Filing.Date, ZipCode = DOS.Process.Zip, Name=Current.Entity.Name) %>%
filter(ZipCode %in% nyc_zips$ZipCode)
# select five new york counties and include only needed variables
biz <- biz %>%
select(Period = Initial.DOS.Filing.Date, ZipCode = DOS.Process.Zip, Name=Current.Entity.Name) %>%
filter(ZipCode %in% nyc_zips$ZipCode)
##Business Data##
biz <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Biz_From_2000.csv",
header= TRUE)
# select five new york counties and include only needed variables
biz <- biz %>%
select(Period = Initial.DOS.Filing.Date, ZipCode = DOS.Process.Zip, Name=Current.Entity.Name) %>%
filter(ZipCode %in% nyc_zips$ZipCode)
View(biz)
# get month and year for filings, exclude day
biz$Period <- as.Date(as.yearmon(biz$Period, '%m/%d/%Y'))
View(biz)
# select five new york counties and include only needed variables
biz <- biz %>%
select(Period = Initial.DOS.Filing.Date, ZipCode = DOS.Process.Zip, Name=Current.Entity.Name) %>%
filter(ZipCode %in% nyc_zips$ZipCode)
biz$Year <- year(biz$Period)
View(biz)
##Business Data##
biz <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Biz_From_2000.csv",
header= TRUE)
View(biz)
# select five new york counties and include only needed variables
biz <- biz %>%
select(Period = Initial.DOS.Filing.Date, ZipCode = DOS.Process.Zip, Name=Current.Entity.Name) %>%
filter(ZipCode %in% nyc_zips$ZipCode)
biz$Year <- year(biz$Period)
# get month and year for filings, exclude day
biz$Period <- as.Date(as.yearmon(biz$Period, '%mm/%dd/%YY'))
biz$Year <- year(biz$Period)
View(biz)
# select five new york counties and include only needed variables
biz <- biz %>%
select(Period = Initial.DOS.Filing.Date, ZipCode = DOS.Process.Zip, Name=Current.Entity.Name) %>%
filter(ZipCode %in% nyc_zips$ZipCode)
##Business Data##
biz <- read.csv("https://raw.githubusercontent.com/dquarshie89/Data-608/master/NY_Biz_From_2000.csv",
header= TRUE)
# select five new york counties and include only needed variables
biz <- biz %>%
select(Period = Initial.DOS.Filing.Date, ZipCode = DOS.Process.Zip, Name=Current.Entity.Name) %>%
filter(ZipCode %in% nyc_zips$ZipCode)
View(biz)
# get month and year for filings, exclude day
biz$Period <- as.yearmon(biz$Period, '%m/%d/%Y')
biz$Year <- year(biz$Period)
View(biz)
shiny::runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
##Combine Data##
final <- inner_join(nyc_zips, newbiz_lastmonth %>%
select(ZipCode, Year, NewBusinesses, TotalNewBusinesses),
by = 'ZipCode')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
runApp('Documents/GitHub/Data-608/Final')
